[
  {
    "id": "devops",
    "title": "DevOps",
    "summary": "CI/CD, automation, infra as code.",
    "image": "https://images.unsplash.com/photo-1618401471353-b98afee0b2eb?w=400&h=250&fit=crop",
    "modules": [
      {
        "id": "do-1",
        "title": "Introduction to DevOps",
        "content": "DevOps combines development and operations to shorten the development lifecycle.\n\n<h4>Key Principles:</h4>\n• Continuous Integration and Delivery\n• Infrastructure as Code\n• Monitoring and Logging\n• Collaboration and Communication\n\n<h4>Benefits:</h4>\n• Faster time to market\n• Improved deployment frequency\n• Lower failure rate\n• Faster recovery time"
      },
      {
        "id": "do-2",
        "title": "Version Control with Git",
        "content": "Git is a distributed version control system for tracking changes in source code.\n\n<h4>Basic Git Commands:</h4>\n```bash\n# Initialize a new repository\ngit init\n\n# Clone an existing repository\ngit clone https://github.com/user/repo.git\n\n# Check status\ngit status\n\n# Stage files\ngit add filename.txt\ngit add .  # Stage all files\n\n# Commit changes\ngit commit -m \"Your commit message\"\n\n# Push to remote\ngit push origin main\n\n# Pull latest changes\ngit pull origin main\n```\n\n<h4>Creating a .gitignore file:</h4>\n```bash\nnode_modules/\n.env\n*.log\ndist/\n.DS_Store\n```"
      },
      {
        "id": "do-3",
        "title": "Git Branching Strategies",
        "content": "Branching allows parallel development and organized workflows.\n\n<h4>Branch Commands:</h4>\n```bash\n# Create new branch\ngit branch feature-login\n\n# Switch to branch\ngit checkout feature-login\n\n# Create and switch in one command\ngit checkout -b feature-signup\n\n# List all branches\ngit branch -a\n\n# Merge branch into main\ngit checkout main\ngit merge feature-login\n\n# Delete branch\ngit branch -d feature-login\n```\n\n<h4>GitFlow Workflow:</h4>\n• main - production code\n• develop - integration branch\n• feature/* - new features\n• release/* - release preparation\n• hotfix/* - urgent fixes"
      },
      {
        "id": "do-4",
        "title": "Continuous Integration Basics",
        "content": "CI automatically builds and tests code changes.\n\n<h4>CI Pipeline Stages:</h4>\n1. Code commit triggers pipeline\n2. Build application\n3. Run automated tests\n4. Generate reports\n5. Notify team of results\n\n<h4>Sample CI Configuration (.gitlab-ci.yml):</h4>\n```yaml\nstages:\n  - build\n  - test\n  - deploy\n\nbuild_job:\n  stage: build\n  script:\n    - npm install\n    - npm run build\n\ntest_job:\n  stage: test\n  script:\n    - npm run test\n    - npm run lint\n```"
      },
      {
        "id": "do-5",
        "title": "CI Tools: Jenkins & GitHub Actions",
        "content": "Popular CI/CD tools for automation.\n\n<h4>GitHub Actions Workflow:</h4>\n```yaml\nname: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n    \n    - name: Install dependencies\n      run: npm install\n    \n    - name: Run tests\n      run: npm test\n    \n    - name: Build\n      run: npm run build\n```\n\n<h4>Jenkinsfile Example:</h4>\n```groovy\npipeline {\n    agent any\n    \n    stages {\n        stage('Build') {\n            steps {\n                sh 'npm install'\n                sh 'npm run build'\n            }\n        }\n        stage('Test') {\n            steps {\n                sh 'npm test'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                sh './deploy.sh'\n            }\n        }\n    }\n}\n```"
      },
      {
        "id": "do-quiz-1",
        "title": "Quiz: Version Control & CI",
        "content": "Test your knowledge",
        "quiz": [
          {
            "q": "Which Git command stages files for commit?",
            "a": ["git push", "git add", "git clone", "git init"],
            "correct": 1
          }
        ]
      },
      {
        "id": "do-6",
        "title": "Continuous Deployment",
        "content": "Automate deployments to production environments.\n\n<h4>Deployment Strategies:</h4>\n\n**Blue-Green Deployment:**\n• Two identical environments (Blue & Green)\n• Deploy to inactive environment\n• Switch traffic when ready\n• Easy rollback\n\n**Canary Deployment:**\n• Gradual rollout to subset of users\n• Monitor metrics\n• Expand if successful\n\n<h4>Deployment Script Example:</h4>\n```bash\n#!/bin/bash\n\n# deploy.sh\necho \"Starting deployment...\"\n\n# Build application\nnpm run build\n\n# Run tests\nnpm test\n\nif [ $? -eq 0 ]; then\n    echo \"Tests passed, deploying...\"\n    \n    # Copy files to server\n    scp -r dist/* user@server:/var/www/app/\n    \n    # Restart application\n    ssh user@server 'pm2 restart app'\n    \n    echo \"Deployment complete!\"\nelse\n    echo \"Tests failed, aborting deployment\"\n    exit 1\nfi\n```"
      },
      {
        "id": "do-7",
        "title": "Infrastructure as Code",
        "content": "Define infrastructure using code for reproducibility.\n\n<h4>Terraform Example - AWS EC2:</h4>\n```hcl\n# main.tf\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\nresource \"aws_instance\" \"web_server\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n  \n  tags = {\n    Name = \"WebServer\"\n    Environment = \"Production\"\n  }\n}\n\nresource \"aws_security_group\" \"web_sg\" {\n  name = \"web-security-group\"\n  \n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n```\n\n<h4>Terraform Commands:</h4>\n```bash\n# Initialize Terraform\nterraform init\n\n# Plan changes\nterraform plan\n\n# Apply changes\nterraform apply\n\n# Destroy infrastructure\nterraform destroy\n```"
      },
      {
        "id": "do-8",
        "title": "Configuration Management with Ansible",
        "content": "Automate server configuration and application deployment.\n\n<h4>Ansible Playbook Example:</h4>\n```yaml\n# webserver.yml\n---\n- name: Configure Web Server\n  hosts: webservers\n  become: yes\n  \n  tasks:\n    - name: Install Nginx\n      apt:\n        name: nginx\n        state: present\n        update_cache: yes\n    \n    - name: Start Nginx service\n      service:\n        name: nginx\n        state: started\n        enabled: yes\n    \n    - name: Copy website files\n      copy:\n        src: /local/path/index.html\n        dest: /var/www/html/index.html\n        owner: www-data\n        group: www-data\n        mode: '0644'\n    \n    - name: Configure firewall\n      ufw:\n        rule: allow\n        port: '80'\n        proto: tcp\n```\n\n<h4>Run Playbook:</h4>\n```bash\n# Execute playbook\nansible-playbook -i inventory.ini webserver.yml\n\n# Check syntax\nansible-playbook --syntax-check webserver.yml\n\n# Dry run\nansible-playbook --check webserver.yml\n```"
      },
      {
        "id": "do-9",
        "title": "Docker Fundamentals",
        "content": "Containerize applications for consistent environments.\n\n<h4>Dockerfile Example:</h4>\n```dockerfile\n# Dockerfile\nFROM node:18-alpine\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm install --production\n\n# Copy application code\nCOPY . .\n\n# Expose port\nEXPOSE 3000\n\n# Set environment\nENV NODE_ENV=production\n\n# Start application\nCMD [\"node\", \"server.js\"]\n```\n\n<h4>Docker Commands:</h4>\n```bash\n# Build image\ndocker build -t myapp:1.0 .\n\n# Run container\ndocker run -d -p 3000:3000 --name myapp myapp:1.0\n\n# List containers\ndocker ps\n\n# View logs\ndocker logs myapp\n\n# Stop container\ndocker stop myapp\n\n# Remove container\ndocker rm myapp\n\n# Push to registry\ndocker tag myapp:1.0 username/myapp:1.0\ndocker push username/myapp:1.0\n```\n\n<h4>docker-compose.yml:</h4>\n```yaml\nversion: '3.8'\n\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n    depends_on:\n      - db\n  \n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_PASSWORD: secret\n    volumes:\n      - db-data:/var/lib/postgresql/data\n\nvolumes:\n  db-data:\n```"
      },
      {
        "id": "do-10",
        "title": "Kubernetes Basics",
        "content": "Orchestrate containers at scale.\n\n<h4>Kubernetes Deployment:</h4>\n```yaml\n# deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: webapp\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: webapp\n  template:\n    metadata:\n      labels:\n        app: webapp\n    spec:\n      containers:\n      - name: webapp\n        image: myapp:1.0\n        ports:\n        - containerPort: 3000\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n```\n\n<h4>Kubernetes Service:</h4>\n```yaml\n# service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: webapp-service\nspec:\n  type: LoadBalancer\n  selector:\n    app: webapp\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 3000\n```\n\n<h4>kubectl Commands:</h4>\n```bash\n# Apply configuration\nkubectl apply -f deployment.yaml\nkubectl apply -f service.yaml\n\n# Get resources\nkubectl get pods\nkubectl get services\nkubectl get deployments\n\n# Scale deployment\nkubectl scale deployment webapp --replicas=5\n\n# View logs\nkubectl logs pod-name\n\n# Delete resources\nkubectl delete -f deployment.yaml\n```"
      },
      {
        "id": "do-quiz-2",
        "title": "Quiz: IaC & Containers",
        "content": "Test your knowledge",
        "quiz": [
          {
            "q": "Which tool is used for Infrastructure as Code?",
            "a": ["Photoshop", "Terraform", "Excel", "Blender"],
            "correct": 1
          }
        ]
      },
      {
        "id": "do-11",
        "title": "Monitoring & Observability",
        "content": "Track application health and performance.\n\n<h4>Prometheus Configuration:</h4>\n```yaml\n# prometheus.yml\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'webapp'\n    static_configs:\n      - targets: ['localhost:3000']\n```\n\n<h4>Application Metrics (Node.js):</h4>\n```javascript\nconst express = require('express');\nconst promClient = require('prom-client');\n\nconst app = express();\n\n// Create metrics\nconst httpRequestDuration = new promClient.Histogram({\n  name: 'http_request_duration_seconds',\n  help: 'Duration of HTTP requests in seconds',\n  labelNames: ['method', 'route', 'status_code']\n});\n\nconst httpRequestTotal = new promClient.Counter({\n  name: 'http_requests_total',\n  help: 'Total number of HTTP requests',\n  labelNames: ['method', 'route', 'status_code']\n});\n\n// Middleware to track metrics\napp.use((req, res, next) => {\n  const start = Date.now();\n  \n  res.on('finish', () => {\n    const duration = (Date.now() - start) / 1000;\n    \n    httpRequestDuration\n      .labels(req.method, req.route?.path || req.path, res.statusCode)\n      .observe(duration);\n    \n    httpRequestTotal\n      .labels(req.method, req.route?.path || req.path, res.statusCode)\n      .inc();\n  });\n  \n  next();\n});\n\n// Metrics endpoint\napp.get('/metrics', async (req, res) => {\n  res.set('Content-Type', promClient.register.contentType);\n  res.end(await promClient.register.metrics());\n});\n\napp.listen(3000);\n```"
      },
      {
        "id": "do-12",
        "title": "Security in DevOps (DevSecOps)",
        "content": "Integrate security into CI/CD pipelines.\n\n<h4>Secrets Management with Environment Variables:</h4>\n```javascript\n// config.js\nrequire('dotenv').config();\n\nmodule.exports = {\n  database: {\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    name: process.env.DB_NAME\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET,\n    expiresIn: '24h'\n  },\n  smtp: {\n    host: process.env.SMTP_HOST,\n    user: process.env.SMTP_USER,\n    pass: process.env.SMTP_PASS\n  }\n};\n```\n\n<h4>Security Scanning in CI:</h4>\n```yaml\n# .github/workflows/security.yml\nname: Security Scan\n\non: [push, pull_request]\n\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Run npm audit\n        run: npm audit --audit-level=moderate\n      \n      - name: Run Snyk security scan\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      \n      - name: OWASP Dependency Check\n        uses: dependency-check/Dependency-Check_Action@main\n```\n\n<h4>Input Validation Example:</h4>\n```javascript\nconst express = require('express');\nconst { body, validationResult } = require('express-validator');\n\napp.post('/api/users',\n  // Validation rules\n  body('email').isEmail().normalizeEmail(),\n  body('password').isLength({ min: 8 }),\n  body('name').trim().escape(),\n  \n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    \n    // Process validated data\n    const { email, password, name } = req.body;\n    // ...\n  }\n);\n```"
      },
      {
        "id": "do-13",
        "title": "Testing Automation",
        "content": "Automated testing ensures code quality.\n\n<h4>Unit Test Example (Jest):</h4>\n```javascript\n// math.js\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction multiply(a, b) {\n  return a * b;\n}\n\nmodule.exports = { add, multiply };\n```\n\n```javascript\n// math.test.js\nconst { add, multiply } = require('./math');\n\ndescribe('Math functions', () => {\n  test('adds 1 + 2 to equal 3', () => {\n    expect(add(1, 2)).toBe(3);\n  });\n  \n  test('multiplies 3 * 4 to equal 12', () => {\n    expect(multiply(3, 4)).toBe(12);\n  });\n  \n  test('handles negative numbers', () => {\n    expect(add(-1, -2)).toBe(-3);\n  });\n});\n```\n\n<h4>Integration Test Example:</h4>\n```javascript\n// api.test.js\nconst request = require('supertest');\nconst app = require('./app');\n\ndescribe('API Endpoints', () => {\n  test('GET /api/users returns users list', async () => {\n    const response = await request(app)\n      .get('/api/users')\n      .expect('Content-Type', /json/)\n      .expect(200);\n    \n    expect(Array.isArray(response.body)).toBe(true);\n  });\n  \n  test('POST /api/users creates new user', async () => {\n    const newUser = {\n      name: 'John Doe',\n      email: 'john@example.com'\n    };\n    \n    const response = await request(app)\n      .post('/api/users')\n      .send(newUser)\n      .expect(201);\n    \n    expect(response.body).toHaveProperty('id');\n    expect(response.body.name).toBe(newUser.name);\n  });\n});\n```\n\n<h4>package.json test scripts:</h4>\n```json\n{\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"test:ci\": \"jest --ci --coverage --maxWorkers=2\"\n  }\n}\n```"
      },
      {
        "id": "do-14",
        "title": "Release Management",
        "content": "Coordinate and manage software releases.\n\n<h4>Semantic Versioning:</h4>\n• MAJOR.MINOR.PATCH (e.g., 2.1.3)\n• MAJOR: Breaking changes\n• MINOR: New features (backward compatible)\n• PATCH: Bug fixes\n\n<h4>Release Script:</h4>\n```bash\n#!/bin/bash\n# release.sh\n\nVERSION=$1\n\nif [ -z \"$VERSION\" ]; then\n    echo \"Usage: ./release.sh <version>\"\n    exit 1\nfi\n\necho \"Creating release $VERSION\"\n\n# Run tests\nnpm test\nif [ $? -ne 0 ]; then\n    echo \"Tests failed!\"\n    exit 1\nfi\n\n# Update version\nnpm version $VERSION\n\n# Build\nnpm run build\n\n# Create git tag\ngit tag -a \"v$VERSION\" -m \"Release v$VERSION\"\n\n# Push changes\ngit push origin main --tags\n\n# Publish to npm\nnpm publish\n\necho \"Release v$VERSION complete!\"\n```\n\n<h4>Feature Flags Example:</h4>\n```javascript\n// featureFlags.js\nconst features = {\n  newDashboard: process.env.FEATURE_NEW_DASHBOARD === 'true',\n  darkMode: process.env.FEATURE_DARK_MODE === 'true',\n  aiAssistant: process.env.FEATURE_AI_ASSISTANT === 'true'\n};\n\nfunction isFeatureEnabled(featureName) {\n  return features[featureName] || false;\n}\n\nmodule.exports = { isFeatureEnabled };\n```\n\n```javascript\n// Usage in code\nconst { isFeatureEnabled } = require('./featureFlags');\n\nif (isFeatureEnabled('newDashboard')) {\n  // Show new dashboard\n  res.render('dashboard-v2');\n} else {\n  // Show old dashboard\n  res.render('dashboard-v1');\n}\n```"
      },
      {
        "id": "do-15",
        "title": "DevOps Best Practices",
        "content": "Build a culture of collaboration and continuous improvement.\n\n<h4>Best Practices Checklist:</h4>\n\n**1. Version Control Everything**\n• Code\n• Infrastructure\n• Configuration\n• Documentation\n\n**2. Automate Repetitively**\n• Testing\n• Deployment\n• Monitoring\n• Backups\n\n**3. Monitor and Measure**\n• Application performance\n• Infrastructure health\n• Deployment frequency\n• Mean time to recovery\n\n**4. Security First**\n• Scan dependencies\n• Encrypt secrets\n• Implement least privilege\n• Regular security audits\n\n<h4>Incident Response Runbook:</h4>\n```markdown\n# Production Incident Response\n\n## 1. Detection\n- Alert received via monitoring\n- User reports issue\n\n## 2. Assessment\n- Check dashboards\n- Review logs\n- Determine severity\n\n## 3. Response\n- Notify team\n- Start incident channel\n- Begin investigation\n\n## 4. Resolution\n- Implement fix\n- Deploy to production\n- Verify resolution\n\n## 5. Post-Mortem\n- Document timeline\n- Identify root cause\n- Create action items\n- Share learnings\n```\n\n<h4>Monitoring Dashboard Setup:</h4>\n```javascript\n// healthcheck.js\nconst express = require('express');\nconst app = express();\n\napp.get('/health', (req, res) => {\n  const health = {\n    uptime: process.uptime(),\n    message: 'OK',\n    timestamp: Date.now(),\n    checks: {\n      database: checkDatabase(),\n      redis: checkRedis(),\n      externalAPI: checkExternalAPI()\n    }\n  };\n  \n  const isHealthy = Object.values(health.checks)\n    .every(check => check.status === 'up');\n  \n  res.status(isHealthy ? 200 : 503).json(health);\n});\n\nfunction checkDatabase() {\n  try {\n    // Check DB connection\n    return { status: 'up', latency: 5 };\n  } catch (error) {\n    return { status: 'down', error: error.message };\n  }\n}\n```"
      },
      {
        "id": "do-quiz-3",
        "title": "Quiz: Advanced DevOps",
        "content": "Test your knowledge",
        "quiz": [
          {
            "q": "What is a canary deployment?",
            "a": [
              "Deploy to all servers at once",
              "Gradual rollout to subset of users",
              "Instant rollback mechanism",
              "Database migration strategy"
            ],
            "correct": 1
          }
        ]
      }
    ]
  }
]
